ylim(0, 500)
df_sct_graph2 <-  inner_join(df_sct_graph, customer_r, by = "customer_id") %>%
select(vst, cust_amt, sex_code)
df_sct_graph2 <-  inner_join(df_sct_graph, customer_r, by = "customer_id") %>%
select(vst_cnt, cust_amt, sex_code)
head(df_sct_graph2)
ggplot(data = df_sct_graph2, aes(x = vst_cnt, y = cust_amt, color=sex_code)) +
geom_point() +
xlim(0,50) +
ylim(0, 500)
df_branch_sales_2 <- df_branch_sales_1 %>% group_by(branch) %>%
summarise(amt = sum(sales) / 1000) %>%
arrange(desc(amt))
df_branch_sales_1 <-  inner_join(reservation_r, order_info_r, by = "reserv_no") %>%
select(branch, sales) %>%
arrange(branch, sales)
df_branch_sales_2 <- df_branch_sales_1 %>% group_by(branch) %>%
summarise(amt = sum(sales) / 1000) %>%
arrange(desc(amt))
df_branch_sales_2
ggplot(df_branch_sales_2, aes(x=branch, y=amt)) + geom_bar(stat = "identity")
ggplot(df_branch_sales_2, aes(x = reorder(branch, -amt), y = amt)) +
geom_bar(stat = "identity")
es(x=reorder(branch, -amt), y=amt, fill = branch)) +
ggplot(df_branch_sales_2, aes(x=reorder(branch, -amt), y=amt, fill = branch)) +
geom_bar(stat = "identity
ggplot(df_branch_sales_2, aes(x=reorder(branch, -amt), y=amt, fill = branch)) +
geom_bar(stat = "identity
ggplot(df_branch_sales_2, aes(x=reorder(branch, -amt), y=amt, fill = branch)) +
geom_bar(stat = "identity")
gg <- ggplot(df_branch_sales_2, aes(x=reorder(branch,-amt), y=amt, fill=branch)) +
geom_bar(stat = "identity") +
xlim(c("강남", "영등포", "종로","용산", "서초", "성북"))
gg
gg <- gg + coord_flip()
gg
gg <- gg + theme(legend.position="bottom")
gg
gg <- gg + scale(fill_discrete(breaks = c("강남", "영등포", "종로", "용산", "서초")))
gg
gg
gg <-  ggplot(data = reservation_r, aes(x=branch)) + geom_bar(stat="count")
gg
gg <- gg + labs(title="지점별 예약 건수", x="지점", y="예약건")
gg
gg <-  gg + theme(axix.title.x = element_text(size = 15, color="blue", face="bold",angle=0),
axis.title.y = element_text(size = 13, color = 'red', angle = 90)
)
gg
ggplot(data=order_info_r, aes(x=sales/1000)) + geom_histogram(binwidth = 5)
df_pie_graph <- inner_join(order_info_r, item_r, by = "item_id") %>%
group_by(item_id, product_name) %>%
summarise(amt_item=sum(sales/1000)) %>%
select(item_id, amt_item, product_name)
df_pie_graph
ggplot(df_pie_graph, aes(x="",y=amt_item, fill = product_name))+
geom_bar(stat = "identity")
gg <- ggplot(df_pie_graph, aes(x="", y=amt_item, fill = product_name)) +
geom_bar(stat="identity") +
coord_polar("y", start=0)
gg
gg <-  gg + scale_fill_brewer(pallette = "Spectra")
gg <-  gg + scale_fill_brewer(pallette = "Spectral")
gg <-  gg + scale_fill_brewer(palette = "Spectral")
gg
library(RColorBrewer)
display.brewer.all()
gg <- gg + scale_fill_manual(values=c("STEAK",="red", "SPECIAL_SET" = "orange", "SEA_FOOD" = "skyblue", "SANDWICH"="skyblue", "SALAD_BAR"="skyblue","SALAD" = "skyblue","PIZZA"="skyblue", "PASTA"="skyblue", "JUICE"="skyblue", "WINE"="skyblue"), breaks = c("STEAK", "SPECIAL_SET"))
gg <- gg + scale_fill_manual(values=c("STEAK"="red", "SPECIAL_SET" = "orange", "SEA_FOOD" = "skyblue", "SANDWICH"="skyblue", "SALAD_BAR"="skyblue","SALAD" = "skyblue","PIZZA"="skyblue", "PASTA"="skyblue", "JUICE"="skyblue", "WINE"="skyblue"), breaks = c("STEAK", "SPECIAL_SET"))
gg
total_amt <-  order_info_r %>%
group_by(reserv_no) %>%
summarise(amt_daily = sum(sales/1000)) %>%
arrange(reserv_no)
total_amt
total_amt <-order_info_r %>%
mutate(month = substr(resrv_no, 1, 6)) %>%
group_by(month) %>%
summarise(amt_monthly = sum(sales/1000))
total_amt <-order_info_r %>%
mutate(month = substr(reserv_no, 1, 6)) %>%
group_by(month) %>%
summarise(amt_monthly = sum(sales/1000))
total_amt
plot(total_amt, aes(x=month, y=amt_monthly, group=1)) + geom_line() +
geom_point()
ggplot(total_amt, aes(x=month, y=amt_monthly, group=1)) + geom_line()
ggplot(total_amt, aes(x=month, y=amt_monthly, group=1)) + geom_line() +
geom_point()
ggplot(total_amt, aes(x=month, y=amt_monthly, group=1)) + geom_line()
ggplot(total_amt, aes(x=month, y=amt_monthly, group=1)) + geom_line() +
geom_point()
ggplot(total_amt, aes(x=month, y=amt_monthly, group=1, label=amt_monthly)) +
geom_line(color="red", size=1) +
geom_point(color="darkred", size=3) +
geom_text(vjust=1.5, hjust=0.5)
color()
colors()
display.brewer.all()
ggplot(df_boxplot_graph, aes(x=product_name, y=sales/1000)) +
geom_boxplot(width=0.8, outlier.size=2, outlier.colour="red") +
labs(title="메뉴아이템 상자그림", x="메뉴", y="매출")
df_boxplot_graph <- inner_join(order_info_r, item_r, by = "item_id")
ggplot(df_boxplot_graph, aes(x=product_name, y=sales/1000)) +
geom_boxplot(width=0.8, outlier.size=2, outlier.colour="red") +
labs(title="메뉴아이템 상자그림", x="메뉴", y="매출")
my_first_cook <- order_info_r %>%
mutate(reserv_month = substr(reserv_no, 1, 6)) %>%
group_by(item_id, reserv_month) %>%
summarise(avg_sales = mean(sales)) %>%
arrange(item_id, reserv_month)
my_first_cook
ggplot(my_first_cook, aes(x=reserv_month, y=avg_sales, group=item_id, color=item_id)) +
geom_line(size=1) +
geom_point(color="darkorange", size=1.5) +
scale_color_brewer(palette = "Paired") +
labs(title="메뉴 아이템별 월 평균 매출 추이", x="월", y="매출")
weight <-  rnorm(n=100000, mean=65, sd=5)
hist(weight, breaks=100, freq=FALSE)
line(density(weight))
test1 <- c(58,70,82,65,72,82,68,80,63)
t.test(test1, mu=65)
subset(iris, Sepal.Length >= 7)
test1 <- c(58,70,82,65,72,82,68,80,63)
t.test(test1, mu=65)
test1 <- c(58,70,82,65,72,82,68,70,63)
t.test(test1, mu=65)
test2 <-c(89,70,83,60,75,60,92,84,80,80)
test2 <-c(89,70,83,60,75,60,92,84,80,80)
t.test(test2,mu=65)
library(dplyr)
#ggplot2 패키지
library(ggplot2)
table(reservation_r$brance)
table(reservation_r$branch)
no_cancel_data <- reservation_r %>% filter(cancel=="N")
table(no_cancel_data)
table(no_cancel_data$branch)
df_f_join_2 <-  inner_join(df_f_join_1, item_r, by = "item_id")
df_f_join_1 <-  inner_join(reservation_r, order_info_r, by="reserv_no")
df_f_join_2 <-  inner_join(df_f_join_1, item_r, by = "item_id")
head(df_f_join_2)
_branches <-  df_f_join_2 %>%
filter(branch == "강남" | branch == "마포" | branch == "서초") %>%
group_by(branch, product_name) %>%
summarise(sales_amt = sum(sales)/1000)
df_branches <-  df_f_join_2 %>%
filter(branch == "강남" | branch == "마포" | branch == "서초") %>%
group_by(branch, product_name) %>%
summarise(sales_amt = sum(sales)/1000)
print(unique(iris$Species))
iris$Species
unique(iris$Species)
ggplot(df_branch_sales, aes(x="", y=sales_amt, fill=product_name)) + facet_grid(facets= .~branch) +
geom_bar(stat="identity")
df_branches <-  df_f_join_2 %>%
filter(branch == "강남" | branch == "마포" | branch == "서초") %>%
group_by(branch, product_name) %>%
summarise(sales_amt = sum(sales)/1000)
ggplot(df_branch_sales, aes(x="", y=sales_amt, fill=product_name)) + facet_grid(facets= .~branch) +
geom_bar(stat="identity")
df_branch_sales <-  df_f_join_2 %>%
filter(branch == "강남" | branch == "마포" | branch == "서초") %>%
group_by(branch, product_name) %>%
summarise(sales_amt = sum(sales)/1000)
ggplot(df_branch_sales, aes(x="", y=sales_amt, fill=product_name)) + facet_grid(facets= .~branch) +
geom_bar(stat="identity")
ggplot(df_branch_sales, aes(x="",y=sales_amt, fill = product_name)) +
facet_grid(facets = . ~ branch) +
geom_bar(stat = "identity") +
coord_polar("y", start  =0 )
df_branch_items <-  df_f_join_2 %>% filter(branch == "강남" | branch == "마포" | branch == "서초")
table(df_branch_items$branch, df_branch_items$product_name)
df_branch_items_table <-  as.data.frame(tabel(df_branch_items$branch, df_branch_items$product_name))
df_branch_items_table <-  as.data.frame(table(df_branch_items$branch, df_branch_items$product_name))
head(df_branch_items_percent)
df_branch_items_percent <-  df_branch_items_table %>%
group_by(df_branch_items_table$Var1 ) %>%
mutate(percent_items = Freq/sum(Freq)*100)
head(df_branch_items_percent)
gg <- gg +
labs(title = "지점별 주문 건수 그래프", x="지점", y="메뉴 아이템 판매비율", fill="메뉴 아이템")
gg
df_rfm_join_1 <-  inner_join(reservation_r, order_info_r, by="reserv_no")
head(df_rfm_join_1)
df_rfm_data <- df_rfm_join_1 %>%
group_by(customer_id) %>%
summarise(visit_sum = n_distinct(reserv_no), sales_sum = sum(sales) /1000) %>%
arrange(customer_id)
df_rfm_data
summary(df_rfm_data)
ggplot(df_rfm_data, aes(x="", y=visit_sum)) +
geom_boxplot(width=0.8, outlier.size=2, outlier.colour="red") + labs(title="방문 횟수 상자그림", x= "빈도", y="방문횟수")
ggplot(df_rfm_data, aes(x="", y=sales_sum)) +
geom_boxplot(width=0.8, outlier.size=2, outlier.colour="red") +
labs(title ="매출 상자 그림", x="매출", y="금액")
ggplot(df_rfm_data, aes(x="", y=sales_sum)) +
geom_boxplot(width=0.8, outlier.size=2, outlier.colour="red") +
labs(title="매출 상자그림", x="매출", y="금액")
quantile(df_rfm_data$visit_sum, probs=c(0.6,0.9))
quantile(df_rfm_data$sales_sum, probs=c(0.6,0.9))
totla_sum_data <- df_rfm_data %>%
summarise(t_visit_sum = sum(visit_sum), t_sales_sum=sum(sales_sum))
rm(totla_sum_data)
total_sum_data <- df_rfm_data %>%
summarise(t_visit_sum = sum(visit_sum), t_sales_sum=sum(sales_sum))
loyalty_sum_data <- df_rfm_data %>%
summarise(l_visit_sum = sum(ifelse(visit_sum >2, visit_sum, 0)), l_sales_sum=sum(ifelse(sales_sum > 135, sales_sum,0)))
loyalty_sum_data / total_sum_data
df_f_join_1 <-  inner_join(reservation_r, order_info_r, by = "reserv_no")
df_f_join_2 <- inner_join(df_f_join_1, item_r, by="item_id")
target_item <- c("M0005", "M0009")
df_stime_order <- df_f_join_2 %>%
filter((item_id %in% target_item)) %>%
group_by(reserv_no) %>%
mutate(order_cnt=n()) %>%
distinct(branch, reserv_no, order_cnt) %>%
filter(order_cnt == 2 ) %>%
arrange(branch)
df_stime_order
stime_order_rsv_no <- df_stime_order$reserv_no
df_stime_order
df_stime_sales <-  df_f_join_2 %>%
filter((reserv_no %in% stime_order_rsv_no) & (item_id %in% target_item)) %>%
group_by(reserv_no, product_name) %>%
summarise(sales_amt = sum(sales) /1000) %>%
arrange(product_name, reserv_no)
df_stime_sales
wine <-  df_stime_sales %>% filter(product_name == "WINE")
steak <- df_stime_sales %>% filter(product_name == "STEAK")
plot(steak$sales_amt, wine$sales_amt)
cor.test(steak$sales_amt, wine$sales_amt)
head(df_rsv_customer)
df_rsv_customer <-  reservation_r %>%
select(customer_id, resrv_no) %>%
arrange(customer_id, reserv_no)
select(customer_id, resrv_no) %>%
arrange(customer_id, reserv_no)
df_rsv_customer <-  reservation_r %>%
select(customer_id, resrv_no) %>%
arrange(customer_id, reserv_no)
df_rsv_customer <-  reservation_r %>%
select(customer_id, reserv_no) %>%
arrange(customer_id, reserv_no)
head(df_rsv_customer)
head(df_steak-order_rsv_no)
df_steak_rsv_no <- order_info_r %>%
filter(item_id == "M0005") %>%
mutate(steak_order="Y") %>%
arrange(reserv_no)
head(df_steak-order_rsv_no)
df_steak_rsv_no <- order_info_r %>%
filter(item_id == "M0005") %>%
mutate(steak_order="Y") %>%
arrange(reserv_no)
head(df_steak-order_rsv_no)
df_steak_order_rsv_no <- order_info_r %>%
filter(item_id == "M0005") %>%
mutate(steak_order="Y") %>%
arrange(reserv_no)
head(df_steak-order_rsv_no)
head(df_steak_order_rsv_no)
df_steak_order_1 <-  left_join(df_rsv_customer, df_steak_order_rsv_no, by = "reserv_no") %>%
group_by(customer_id) %>%
mutate(steak_order=ifelse(is.na(steak_order),"N","Y")) %>%
summarise(steak_order = max(steak_order)) %>%
arrange(customer_id)
df_dpd_var <-  df_steak_order_1
df_dpd_var
df_customer <-  customer_r %>% filter(!is.na(sex_code))
df_table_join_1 <- inner_join(df_customer, reservation_r, by="customer_id")
str(df_table_join_2)
df_customer <-  customer_r %>% filter(!is.na(sex_code))
df_table_join_1 <- inner_join(df_customer, reservation_r, by="customer_id")
df_table_join_2 <- inner_join(df_table_join_1, order_info_r, by="reserv_no")
str(df_table_join_2)
df_table_join_3 <- df_table_join_2 %>%
group_by(customer_id, sex_code, reserv_no, visitor_cnt) %>%
summarise(sales_sum = sum(sales)) %>%
group_by(customer_id, sex_code) %>%
summarise(visit_sum = n_distinct(reserv_no), visitor_sum = sum(visitor_cnt), sales_sum=sum(sales_sum) / 1000) %>%
arrange(customer_id)
df_idp_var <- df_table_join_3
df_idp_var
df_final_data <-  inner_join(df_idp_var, df_dpd_var, by="customer_id")
df_final_data$sex_code <-  as.factor(df_final_data$sex_code)
df_final_data$steak_order <-  as.factor(df_final_data$steak_order)
df_final_data <- inner_join(df_idp_var, df_dpd_var, by="customer_id")
df_final_data$sex_code <-  as.factor(df_final_data$sex_code)
df_final_data$steak_order <-  as.factor(df_final_data$steak_order)
df_final_data <- df_final_data[,c(2:6)]
df_final_data
install.packages("rpart")
library(rpart)
install.packages("rpart")
library(rpart)
install.packages("caret")
set.seed(1000)
set.seed(10000)
test <- df_final-data[-train_data,]
test <- df_final_data[-train_data,]
train_data <- createDataPartition(y=df_final_data$steak_order, p=0.8, list=FALSE)
library(rpart)
library(caret)
install.packages("caret")
library(caret)
library(caret)
install.packages("future")
library(caret)
train_data <- createDataPartition(y=df_final_data$steak_order, p=0.8, list=FALSE)
train <- df_final_data[train_data,]
test <- df_final_data[-train_data,]
confusionMatrix(predicted, test$steak_order)
predicted <- predict(decision_tree, test, type='class')
predicted <- predict(decision_tree, test, type='class')
predicted <- predict(decision_tree, test, type='class')
decision_tree <- rpart(steak_order~., data = trainControl)
decision_tree <- rpart(steak_order~., data = train)
decision_tree
predicted <- predict(decision_tree, test, type='class')
confusionMatrix(predicted, test$steak_order)
plot(decision_tree, margin=0.1)
text(decision_tree)
install.packages("rattle")
library(rattle)
fancyRpartPlot(decision_tree)
#그래프
plot(iris$Petal.Length, iris$Petal.Width, main = "iris data", xlab = "Petal Length", ylab = "Petal Width", col = iris$Species)
pairs(~ Sepal.Width + Sepal.Length + Petal.Width + Petal.Length, data = iris, col = iris$Species)
x <- tapply(iris$Petal.Length, iris$Petal.Width, mean)
x <- tapply(iris$Petal.Length, iris$Petal.Width, mean)
x
x <- tapply(iris$Petal.Length, iris$Petal.Width, mean)
pie(x$Petal.Length, labels = x$Species)
x
pie(x$Petal.Length, labels = x$Species)
(n1 <- n1+10)  n2 && n1 < (n2 <-  n2 +10)
(n1 <- n1+10) > n2 && n1 < (n2 <-  n2 +10)
n1 <- 10; n2 <- 20
(n1 <- n1+10) > n2 && n1 < (n2 <-  n2 +10)
n1 <- 10; n2 <- 20
(n1 <- n1+10) > n2 && n1 < (n2 <-  n2 +10)
n1
n2
n1 <- 10; n2 <- 20
(n1 <- n1+10) > n2 & n1 < (n2 <-  n2 +10)
n1
n2
install.packages("reshape2")
library(reshape2)
head(airquality)
df <- data.frame(uid = c("test1", "test2", "test3", "test4"), uname=c("홍길동", "전우치","채영신","임꺽정"),
grade=c(1,2,3,4), score=c(86,75,91,94))
df
melt(df, id.var=c("uid","uname"), measure.vars=c("grade","score"),na.rm=TRUE)
md
md <- melt(df, id.var=c("uid","uname"), measure.vars=c("grade","score"),na.rm=TRUE)
md
md2 <- cast(md, uid + uname ~ variable)
md2 <- cast(md, uid + uname ~ variable)
md2 <- dcast(md, uid + uname ~ variable)
md2
install.packages("sqldf")
library(sqldf)
sqldf("select*from iris")
sqldf("select Species, Sepal.Length, Sepal.width from iris where Sepal.width >= 4")
head(iris)
sqldf("select Species, Sepal.length, Sepal.width from iris where Sepal.width >= 4")
sqldf("select Species, Sepal.Length, Sepal.width from iris where Sepal.width >= 4")
sqldf("select Species, Sepal.width from iris where Sepal.width >= 4")
sqldf("select Species,Sepal.Length,Sepal.width from iris where Sepal.width >= 4")
sqldf("select Species,Sepal$Length,Sepal$width from iris where Sepal.width >= 4")
sqldf("select * from iris where Sepal.width >= 4")
head(iris)
sqldf("select Species from iris")
sqldf("show tables")
class(iris)
result <- sqldf("select Species,Sepal.Length, Sepal.Width from iris where Sepal.width >= 4")
head(iris)
sqldf("select*from iris limit 10")
result <- sqldf("select Species, Sepal.Length, Sepal.Width from iris where Sepal.width >= 4")
result <- sqldf("select Species, \"Sepal.Length\", \"Sepal.Width\" from iris where \"Sepal.Width\" >= 4")
source("D:/jhoh/rproject/practice_project/first_project.R", echo=TRUE)
result
#iris에서 상위 10개의 데이터 추출
sqldf("select*from iris limit 10")
# iris에서 Species별 Sepal.Length 합과 평균
sqldf("select Species, sum(\"Sepal.Length\), avg(\"Sepal.Length\) from iris group by Species")
# iris에서 Species별 Sepal.Length 합과 평균
sqldf("select Species, sum(\"Sepal.Length\"), avg(\"Sepal.Length\") from iris group by Species")
# iris에서 Species별 Sepal.Length 합과 평균
sqldf("select Species, sum(\"Sepal.Length\") as 합계, avg(\"Sepal.Length\") as 평균 from iris group by Species")
orders <- data.frame(oid = c("a01","a02","a03","a04","a05","a06"), uid = c("test1", "test2", "test3", "test1", "test2", "test3"), pay= c(2000,2500,3500,1500,5500,6000))
orders
sqldf("select a.uid, sum(b.pay) from customers a, orders b group by a.uid")
#customers와 orders를 조인하여 uid, uname, oid, pay를 출력
sqldf("select a.uid, a.uname, b.oid, b.pay from customers a, orders b where a.uid = b.uid")
#customers와 orders를 조인하여 uid, uname, oid, pay를 출력
sqldf("select a.uid, a.uname, b.oid, b.pay from customers a, orders b where a.uid = b.uid")
sqldf("select a.uid, sum(b.pay) from orders b group by a.uid")
sqldf("select a.uid, sum(b.pay) from customers a, orders b group by a.uid having total >= 6000")
customers <- data.frame(uid = c("test1", "test2", "test3", "test4"), uname = c("홍길동", "전우치", "채영신", "임꺽정"), gender = c("남", "남", "여", "여"))
customers
#     uid  uname gender
# 1 test1 홍길동     남
# 2 test2 전우치     남
# 3 test3 채영신     여
# 4 test4 임꺽정     여
orders <- data.frame(oid = c("a01", "a02", "a03", "a04", "a05", "a06"), uid = c("test1", "test2", "test2", "test1", "test3", "test1"), pay = c(2000, 2500, 3500, 1500, 5500, 6000))
orders
library(sqldf)
#회원별 아이디와 주문 총액 출력(단, 주문액 없어도 아이디는 출력)
sqldf("select a.uid, sum(b.pay) 주문총액 from customers a left join orders b on a.uid = b.uid group by a.uid")
#한번이라도 구매한 회원의 아이디와 이름 출력
sqldf("select uid, uname from customers where uid in (select uid from orders)")
install.packages("plyr")
library(plyr)
library(plyr)
# ddply(데이터 프레임, 기준 컬럼, 내부함수, 적용함수-통계함수)
# 내부함수: summarise - 그룹화(group by와 비슷), transform - 원본과 그룹 연산 결과 조인
# 회원별 구매 총액, 평균 구매액
library(ddply)
library(dplyr)
# ddply(데이터 프레임, 기준 컬럼, 내부함수, 적용함수-통계함수)
# 내부함수: summarise - 그룹화(group by와 비슷), transform - 원본과 그룹 연산 결과 조인
# 회원별 구매 총액, 평균 구매액
ddply(orders, "uid", summarise, total=sum(pay, avg=mean(pay)))
# ddply(데이터 프레임, 기준 컬럼, 내부함수, 적용함수-통계함수)
# 내부함수: summarise - 그룹화(group by와 비슷), transform - 원본과 그룹 연산 결과 조인
# 회원별 구매 총액, 평균 구매액
ddply(orders, "uid", summarise, total=floor(sum(pay, avg=mean(pay)))
# ddply(데이터 프레임, 기준 컬럼, 내부함수, 적용함수-통계함수)
# 내부함수: summarise - 그룹화(group by와 비슷), transform - 원본과 그룹 연산 결과 조인
# 회원별 구매 총액, 평균 구매액
ddply(orders, "uid", summarise, total=sum(pay, floor(avg=mean(pay))))
# ddply(데이터 프레임, 기준 컬럼, 내부함수, 적용함수-통계함수)
# 내부함수: summarise - 그룹화(group by와 비슷), transform - 원본과 그룹 연산 결과 조인
# 회원별 구매 총액, 평균 구매액
ddply(orders, "uid", summarise, total=sum(pay, round(avg=mean(pay),0))
# ddply(데이터 프레임, 기준 컬럼, 내부함수, 적용함수-통계함수)
# 내부함수: summarise - 그룹화(group by와 비슷), transform - 원본과 그룹 연산 결과 조인
# 회원별 구매 총액, 평균 구매액
ddply(orders, "uid", summarise, total=round(sum(pay, avg=mean(pay)),0))
# ddply(데이터 프레임, 기준 컬럼, 내부함수, 적용함수-통계함수)
# 내부함수: summarise - 그룹화(group by와 비슷), transform - 원본과 그룹 연산 결과 조인
# 회원별 구매 총액, 평균 구매액
ddply(orders, "uid", summarise, total=round(sum(pay, avg=mean(pay)),digits=0))
# ddply(데이터 프레임, 기준 컬럼, 내부함수, 적용함수-통계함수)
# 내부함수: summarise - 그룹화(group by와 비슷), transform - 원본과 그룹 연산 결과 조인
# 회원별 구매 총액, 평균 구매액
ddply(orders, "uid", transform, summarise, total=round(sum(pay, avg=mean(pay)),digits=0))
# ddply(데이터 프레임, 기준 컬럼, 내부함수, 적용함수-통계함수)
# 내부함수: summarise - 그룹화(group by와 비슷), transform - 원본과 그룹 연산 결과 조인
# 회원별 구매 총액, 평균 구매액
ddply(orders, "uid", transform, total=round(sum(pay, avg=mean(pay)),digits=0))
# 회원별 구매 총액, 평균 구매액(정수로 연산-반올)
mapply(sum, 1:10, 101:110)
mapply('+', 1:10, 101:110)
# 회원별 구매 총액, 평균 구매액(정수로 연산-반올)
mapply(sum, 1:9, 101:110)
mapply('+', 1:5, 101:110)
mapply('+', 1:5, 101:110)
library(data.table)
#data.table 패키지 : R에서 가장 많이 사용하는 데이터 핸들링 패키지 중 하나
#탐색, 연산, 병합하는데 유용하며 data.frame 보다 빠름
#빠른 그루핑과 ordering 등에서 data.frame 보다 유용함
install.packages("data.table")
dt <- data.table(piid = c(1,2,3,4), piname = c("상품1","상품2","상품3","상품4"),piprice=c(1000,2000,1500,3000))
library(data.table)
#data.table 패키지 : R에서 가장 많이 사용하는 데이터 핸들링 패키지 중 하나
#탐색, 연산, 병합하는데 유용하며 data.frame 보다 빠름
#빠른 그루핑과 ordering 등에서 data.frame 보다 유용함
install.packages("data.table")
library(data.table)
library(data.table)
#data.table 패키지 : R에서 가장 많이 사용하는 데이터 핸들링 패키지 중 하나
#탐색, 연산, 병합하는데 유용하며 data.frame 보다 빠름
#빠른 그루핑과 ordering 등에서 data.frame 보다 유용함
install.packages("data.table")
library(data.table)
dt <- data.table(piid = c(1,2,3,4), piname = c("상품1","상품2","상품3","상품4"),piprice=c(1000,2000,1500,3000))
dt <- data.table(piid = c(1,2,3,4), piname = c("상품1","상품2","상품3","상품4"),piprice=c(1000,2000,1500,3000))
dt
dt[1:2]
dt[1:2]
dt[,c("piid", "piprice")]
dt[,.(piid,piprice)]
dt[,list(piid,piprice)]
dt[piprice>=2000]
#dt에서 piprice의 값이 1000~2000 인 데이터 추출
dt[piprice >=1000 & piprice<2000]
dt[piprice between 1000 and 2000]
#select(데이터, 추출할 컬럼(들))
select(orders, oid, uid, pay) #orders에서 지정한 3컬럼 추출
library(dplyr)
install.packages("dplyr")
library(dplyr)
orders %>% select(oid, uid, pay)
#select(데이터, 추출할 컬럼(들))
select(orders, oid, uid, pay) #orders에서 지정한 3컬럼 추출
# piid piname piprice
# filter(데이터, 필터링 조건)
filter(orders, pay >= 3000)
orders %>% filter(pay>=3000)
#mutate(데이터, 추가할 컬럼명 = 컬럼값)
mutate(orders, cnt=pay/100)
orders
#arrange(데이터, 정렬기준 컬럼)
arrange(orders, desc(pay))
orders %>% arrange(desc(pay))
#summarize(데이터, 요약 통계 계산 컬럼)
summarize(orders, mean_pay = mean(pay, na.rm=TRUE))
